
import java_cup.runtime.*;
import se.cortado.Scanner;

/* Preliminaries to set up and use the scanner.  */

parser code {:
	private Lexer lexer;
	private File file;
	
	public Parser(File file) {
		this();
		this.file = file;
		try {
			lexer = new Lexer(new FileReader(file));
		}
		catch (IOException exception) {
			throw new Error("Unable to open file \"" + file + "\"");
		}
	}

:};

scan with {: return lexer.yylex(); :};

/* ======== Terminals (tokens returned by the scanner) ======== */

/* MISC */
terminal		PUBLIC, STATIC, VOID, CLASS, COMMA, DOT, RETURN;

/* Statements */
terminal		IF, ELSE, WHILE, SYSOUT;

/* Expressions */
terminal 		LENGTH, TRUE, FALSE, THIS, BANG;

/* Datatypes */
terminal 		INT, INT_ARRAY, BOOLEAN, STRING_ARRAY, IDENTIFIER;

/* Operators */
terminal     	PLUS, MINUS, MULTIPLY, LPAREN, RPAREN, LBRACKET, RBRACKET, LCURLY, RCURLY, AND, LESS, ASSIGN, EQUALS;
terminal Integer    NUMBER, LONG_NUMBER;

terminal SEMI;
/* Non terminals */
non terminal            expr_list, expr_part, program, main_class, class_decl, class_decls, var_decl, var_decls, method_decl, method_decls, main_method, stmt_list, stmt, formal_list, formal_rest;
non terminal Integer    expr, term, factor;
non terminal type;

/* Precedences */
precedence left PLUS, MINUS;
precedence left MULTIPLY;

/* State to start with */
start with program;

/* The grammar */

program ::= main_class class_decls;

main_class ::= CLASS IDENTIFIER LCURLY main_method RCURLY;
main_method ::= PUBLIC STATIC VOID IDENTIFIER LPAREN STRING_ARRAY IDENTIFIER RPAREN LCURLY var_decls stmt_list RCURLY;

stmt_list ::= stmt | stmt stmt_list;
var_decls ::= var_decl | var_decl var_decls;
method_decls ::= method_decl | method_decl method_decls;
class_decls ::= class_decl | class_decl class_decls;

var_decl ::= type IDENTIFIER SEMI;
method_decl ::= PUBLIC type IDENTIFIER LPAREN formal_list RPAREN LCURLY var_decls stmt_list RETURN expr SEMI RCURLY;
class_decl ::= CLASS IDENTIFIER LCURLY var_decls method_decls RCURLY;

type ::= INT | INT_ARRAY | BOOLEAN | IDENTIFIER;

formal_list ::= type IDENTIFIER | type IDENTIFIER formal_rest;
formal_rest ::= COMMA type IDENTIFIER;

stmt ::=	LCURLY stmt_list RCURLY 
			| stmt SEMI
			| IF LPAREN expr RPAREN stmt ELSE stmt
			| WHILE LPAREN expr RPAREN stmt
			| SYSOUT LPAREN expr RPAREN SEMI
			| IDENTIFIER ASSIGN expr SEMI
			| IDENTIFIER LBRACKET expr RBRACKET ASSIGN expr SEMI;




/*
expr_list ::= expr_list expr_part | 
              expr_part;
              
expr_part ::= expr SEMI;

expr      ::=	

				| expr:e1 PLUS expr:e2
					{: System.out.println(e1.intValue() + e2.intValue()); :}
				| expr MINUS expr
					{: :}
				| LPAREN expr RPAREN
				| NUMBER
				;
*/

