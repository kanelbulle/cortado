
import java_cup.runtime.*;
import se.cortado.Scanner;
import java.io.*;

/* Preliminaries to set up and use the scanner.  */

parser code {:
	private Scanner scanner;
	private File file;
	
	public Parser(File file) {
		this();
		this.file = file;
		try {
			scanner = new Scanner(new FileReader(file));
		}
		catch (IOException exception) {
			throw new Error("Unable to open file \"" + file + "\"");
		}
	}

:};

scan with {: return scanner.yylex(); :};

/* ======== Terminals (tokens returned by the scanner) ======== */

/* MISC */
terminal		PUBLIC, STATIC, VOID, CLASS, COMMA, DOT, RETURN, NEW;

/* Statements */
terminal		IF, ELSE, WHILE, SYSOUT;

/* Expressions */
terminal 		LENGTH, TRUE, FALSE, THIS, BANG;

/* Datatypes */
terminal 		INT, INT_ARRAY, BOOLEAN, STRING_ARRAY, IDENTIFIER;

/* Operators */
terminal     	PLUS, MINUS, MULTIPLY, LPAREN, RPAREN, LBRACKET, RBRACKET, LCURLY, RCURLY, AND, LESS, ASSIGN;
terminal Integer    INTEGER;

terminal SEMI;
/* Non terminals */
non terminal	expr, expr_list, expr_rest, program, main_class, class_decl, class_decls, var_decl, var_decls, method_decl, method_decls, main_method, stmt_list, stmt, formal_list, formal_rest;
non terminal type;

/* Precedences */
precedence left BANG;
precedence left PLUS, MINUS;
precedence left MULTIPLY;
precedence left AND, LESS, DOT;

/* State to start with */
start with program;

/* The grammar */

program ::= main_class class_decls;

main_class ::= CLASS IDENTIFIER LCURLY main_method RCURLY;
main_method ::= PUBLIC STATIC VOID IDENTIFIER LPAREN STRING_ARRAY IDENTIFIER RPAREN LCURLY var_decls stmt_list RCURLY;

var_decls ::= var_decls var_decl | var_decl;
var_decl ::= type IDENTIFIER SEMI;

method_decls ::= method_decls method_decl | method_decl;
method_decl ::= PUBLIC type IDENTIFIER LPAREN formal_list RPAREN LCURLY var_decls stmt_list RETURN expr SEMI RCURLY;

class_decls ::= class_decls class_decl | class_decl;
class_decl ::= CLASS IDENTIFIER LCURLY var_decls method_decls RCURLY;

type ::= INT | INT_ARRAY | BOOLEAN | IDENTIFIER;

formal_list ::= type IDENTIFIER | type IDENTIFIER formal_rest;
formal_rest ::= COMMA type IDENTIFIER;

stmt_list ::= stmt_list stmt | stmt;
stmt ::=	LCURLY stmt_list RCURLY 
			| IF LPAREN expr RPAREN stmt ELSE stmt
			| WHILE LPAREN expr RPAREN stmt
			| SYSOUT LPAREN expr RPAREN SEMI
			| IDENTIFIER ASSIGN expr SEMI
			| IDENTIFIER LBRACKET expr RBRACKET ASSIGN expr SEMI;

expr_list ::= expr expr_rest;
expr_rest ::= expr_rest COMMA expr | COMMA expr;

expr ::=	expr:e1 PLUS expr:e2
			| expr:e1 MINUS expr:e2
			| expr:e1 MULTIPLY expr:e2
			| expr:e1 AND expr:e2
			| expr:e1 LESS expr:e2
			| expr LBRACKET expr RBRACKET
			| expr DOT LENGTH
			| expr DOT IDENTIFIER LPAREN expr_list RPAREN
			| INTEGER
			| TRUE
			| FALSE
			| IDENTIFIER
			| THIS
			| NEW INT LBRACKET expr RBRACKET
			| NEW IDENTIFIER LPAREN RPAREN
			| BANG expr
			| LPAREN expr RPAREN;

