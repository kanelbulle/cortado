package se.cortado.syntax.visitor;

import se.cortado.syntaxtree.And;
import se.cortado.syntaxtree.ArrayAssign;
import se.cortado.syntaxtree.ArrayLength;
import se.cortado.syntaxtree.ArrayLookup;
import se.cortado.syntaxtree.Assign;
import se.cortado.syntaxtree.Block;
import se.cortado.syntaxtree.BooleanType;
import se.cortado.syntaxtree.Call;
import se.cortado.syntaxtree.ClassDecl;
import se.cortado.syntaxtree.ClassDeclExtends;
import se.cortado.syntaxtree.ClassDeclList;
import se.cortado.syntaxtree.ClassDeclSimple;
import se.cortado.syntaxtree.Exp;
import se.cortado.syntaxtree.ExpList;
import se.cortado.syntaxtree.False;
import se.cortado.syntaxtree.Formal;
import se.cortado.syntaxtree.FormalList;
import se.cortado.syntaxtree.Identifier;
import se.cortado.syntaxtree.IdentifierExp;
import se.cortado.syntaxtree.IdentifierType;
import se.cortado.syntaxtree.If;
import se.cortado.syntaxtree.IntArrayType;
import se.cortado.syntaxtree.IntegerLiteral;
import se.cortado.syntaxtree.IntegerType;
import se.cortado.syntaxtree.LessThan;
import se.cortado.syntaxtree.MainClass;
import se.cortado.syntaxtree.MethodDecl;
import se.cortado.syntaxtree.MethodDeclList;
import se.cortado.syntaxtree.Minus;
import se.cortado.syntaxtree.NewArray;
import se.cortado.syntaxtree.NewObject;
import se.cortado.syntaxtree.Not;
import se.cortado.syntaxtree.Plus;
import se.cortado.syntaxtree.Print;
import se.cortado.syntaxtree.Program;
import se.cortado.syntaxtree.Statement;
import se.cortado.syntaxtree.StatementList;
import se.cortado.syntaxtree.StringArrayType;
import se.cortado.syntaxtree.This;
import se.cortado.syntaxtree.Times;
import se.cortado.syntaxtree.True;
import se.cortado.syntaxtree.Type;
import se.cortado.syntaxtree.VarDecl;
import se.cortado.syntaxtree.VarDeclList;
import se.cortado.syntaxtree.VoidExp;
import se.cortado.syntaxtree.VoidType;
import se.cortado.syntaxtree.While;

public interface TypeVisitor {
	public Type visit(And node);
	public Type visit(ArrayAssign node);
	public Type visit(ArrayLength node);
	public Type visit(ArrayLookup node);
	public Type visit(Assign node);
	public Type visit(Block node);
	public Type visit(BooleanType node);
	public Type visit(Call node);
	public Type visit(ClassDecl node);
	public Type visit(ClassDeclExtends node);
	public Type visit(ClassDeclList node);
	public Type visit(ClassDeclSimple node);
	public Type visit(Exp node);
	public Type visit(ExpList node);
	public Type visit(False node);
	public Type visit(Formal node);
	public Type visit(FormalList node);
	public Type visit(Identifier node);
	public Type visit(IdentifierExp node);
	public Type visit(IdentifierType node);
	public Type visit(If node);
	public Type visit(IntArrayType node);
	public Type visit(IntegerLiteral node);
	public Type visit(IntegerType node);
	public Type visit(LessThan node);
	public Type visit(MainClass node);
	public Type visit(MethodDecl node);
	public Type visit(MethodDeclList node);
	public Type visit(Minus node);
	public Type visit(NewArray node);
	public Type visit(NewObject node);
	public Type visit(Not node);
	public Type visit(Plus node);
	public Type visit(Print node);
	public Type visit(Program node);
	public Type visit(Statement node);
	public Type visit(StatementList node);
	public Type visit(StringArrayType node);
	public Type visit(This node);
	public Type visit(Times node);
	public Type visit(True node);
	public Type visit(Type node);
	public Type visit(VarDecl node);
	public Type visit(VarDeclList node);
	public Type visit(VoidType node);
	public Type visit(VoidExp node);
	public Type visit(While node);
}
